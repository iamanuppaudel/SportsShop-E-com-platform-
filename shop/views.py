from django.http import JsonResponse
from django.shortcuts import render
import json
from . utils import *
import datetime
from django.views.decorators.csrf import csrf_exempt


# Create your views here.
from django.shortcuts import render
from .models import *
from django.core.paginator import EmptyPage, PageNotAnInteger, Paginator
from django.db.models import Q 

products_per_page = 12
blogs_per_page =4
# Create your views here.

def index(request):
    products = product.objects.all()[::-1][:12]
    try:
        data = cartData(request)
    except:
        data= {
            'cartItems':0}

    cartItems= data['cartItems']
    context ={
        'products': products,
        'cartItems':cartItems,
         }
    return render(request,'shop/index.html', context)


def browse(request): 

    club = request.GET.get('club',"")
    search = request.GET.get('search',"")
    sort = request.GET.get('sort',"")
    category_name = request.GET.get('category',"")

    if search:
        products = product.objects.filter(Q(name__icontains=search) | Q(description__icontains=search)) # SQLite doesnâ€™t support case-sensitive LIKE statements; contains acts like icontains for SQLite

    else:
        products = product.objects.all()

    if club:
        products = products.filter(club=club) 

    if sort:
        products = products.order_by(sort)

    if category_name:
        products = products.filter(category=category_name)

    

    page = request.GET.get('page',1)
    product_paginator = Paginator(products, products_per_page)

    try:
        products = product_paginator.page(page)
    except EmptyPage:
        products = product_paginator.page(product_paginator.num_pages)
    except:
        products = product_paginator.page(products_per_page)

    number = products.number
    loop = product_paginator.get_elided_page_range(number,on_each_side=2, on_ends=1)

    cn = clubname.objects.all()
    categorys = category.objects.all()
    hotdeals = product.objects.filter(hot_deal = True)
    try:
        data = cartData(request)
    except:
        data= {
            'cartItems':0}
    cartItems= data['cartItems']
    context = {"cartItems": cartItems, "categorys":categorys,"clubname":cn,"products":products, "page_obj":products,"is_paginated":True, "paginator":product_paginator,"loop":loop, "hotdeals":hotdeals}
    return render(request, 'shop/browse.html', context)

def productdetails(request, pk):
    detail = product.objects.get(id=pk)
    relatedproducts = detail.relatedproducts.all()
    try:
        data = cartData(request)
    except:
        data= {
            'cartItems':0}
    cartItems= data['cartItems']
    
    context={
        "productdetails":detail,
        "relatedproducts": relatedproducts,
        "cartItems": cartItems,
    }
    return render(request, 'shop/single-product.html',context)

def blogpage(request):

    blogs = blog.objects.all().order_by('-blog_date')
    page = request.GET.get('page',1)
    blog_paginator = Paginator(blogs, blogs_per_page)

    try:
        blogs = blog_paginator.page(page)
    except EmptyPage:
        blogs = blog_paginator.page(blog_paginator.num_pages)
    except:
        blogs = blog_paginator.page(products_per_page)

    number = blogs.number
    loop = blog_paginator.get_elided_page_range(number,on_each_side=2, on_ends=1)

    popularpost = blog.objects.all().order_by('-view_count')[:6]
    try:
        data = cartData(request)
    except:
        # if you delete the (cookie=> device) from browser it prevents the page to load because it tries to find cartitems before device id is generated.
        # So if there is no device id let it be generated by loading page with out cartitem value. 
        data= {
            'cartItems':0}
    cartItems= data['cartItems']
    context={
        "blogs":blogs,
        "page_obj":blogs,
        "is_paginated":True,
        "paginator":blog_paginator,
        "loop":loop,
        "popularpost":popularpost,
        "cartItems":cartItems,
    }
    return render(request, 'shop/blog.html', context)

def blogdetail(request, pk):
    # <<<  for  updating view count
    blog_object= blog.objects.get(id=pk)
    blog_object.view_count =blog_object.view_count + 1
    blog_object.save()
    # view count updated >>>

    blogdetails = blog.objects.get(id=pk)
    popularpost = blog.objects.all().order_by('-view_count')[:6]
    data = cartData(request)
    cartItems= data['cartItems']

    context={
        "blogdetails": blogdetails,
        "popularpost": popularpost,
        "cartItems":cartItems,
    } 
    return render(request, 'shop/single-blog.html', context)


def categories(request, slug):
    
    if slug == "1":
        pagename = "Casual"
        products = product.objects.filter(category=slug)
    if slug == "2":
        pagename = "Jerseys"
        products = product.objects.filter(category=slug)
    if slug == "3":
        pagename = "Accesories"
        products = product.objects.filter(category=slug)
    if slug == "hot-deals":
        pagename = slug
        products = product.objects.filter(hot_deal=True)

    data = cartData(request)
    cartItems= data['cartItems']

    context={
        "products": products,
        "pagename": pagename,
        "cartItems": cartItems,
    }
    return render(request, 'shop/category.html',context)


def contact(request):
    data = cartData(request)
    cartItems= data['cartItems']
    context={
        'cartItems':cartItems,
    }
    return render(request, 'shop/contact.html', context)

def cart(request):

    data = cartData(request)
    cartItems= data['cartItems']
    order = data['order']
    items = data['items']
    context={
        'items': items,
        'order':order,
        'cartItems': cartItems,

    }
    return render(request,'shop/cart.html', context)

@csrf_exempt
def checkout(request):
    data = cartData(request)
    cartItems= data['cartItems']
    order = data['order']
    items = data['items']
    context={
        'items': items,
        'order':order,
        'cartItems': cartItems,
    }

    return render(request, 'shop/checkout.html', context)

def updateItem(request):
    data = json.loads(request.body)
    productId = data['productId']
    action = data['action']
    print('Productid:',productId, 'action:',action)

    try:
        customer = request.user.customer
    except:
        device = request.COOKIES['device']
        customer, created = Customer.objects.get_or_create(device=device)

    Product = product.objects.get(id=productId)
    order, created = Order.objects.get_or_create(customer=customer, complete=False)
    orderItem, created = OrderItem.objects.get_or_create(order=order, Product=Product)

    if action=='add':
        orderItem.quantity = (orderItem.quantity + 1)
    elif action=='remove':
        orderItem.quantity = (orderItem.quantity - 1)
    
    orderItem.save()

    if orderItem.quantity <= 0:
        orderItem.delete()

    return JsonResponse("Item added", safe=False)


def processOrder(request):
    transaction_id = datetime.datetime.now().timestamp()
    data = json.loads(request.body)

    try:
        customer = request.user.customer
    except:
        device = request.COOKIES['device']
        customer, created = Customer.objects.get_or_create(device=device)
        

    order, created = Order.objects.get_or_create(customer=customer, complete=False)

    total = float(data['form']['total'])
    order.transaction_id = transaction_id

    if total == order.get_cart_total:
        order.complete = True
    order.save()
        
    ShippingAddress.objects.create(
    customer = customer,
    order = order,
    fullname=data['shipping']['fullname'],
    phone= data['shipping']['phone'],
    email= data['shipping']['email'],
    district= data['shipping']['district'],
    city= data['shipping']['city'],
    address= data['shipping']['address'],
    order_notes= data['shipping']['message'],
    )    
     
    return JsonResponse("Order Placed Succesfully.", safe=False)